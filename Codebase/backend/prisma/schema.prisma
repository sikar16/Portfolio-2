// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// schema.prisma

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model ServiceProvider {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  fullName  String
  createdAt DateTime @default(now())
}

model User {
  id            Int              @id @default(autoincrement())
  phoneNumber   String           @unique
  email         String           @unique
  password      String
  status        UserStatus       // Changed to enum
  createdAt     DateTime         @default(now())
  userInfo      UserInfo?
  userDetails   UserDetail?
  services      Service[]
  skills        Skill[]
  projects      Project[]
  testimonials  Testimonial[]
  blogs         Blog[]
  socialLinks   SocialMediaLink[]

  ProjectCategory ProjectCategory[]

  SkillCategory SkillCategory[]
}

model UserInfo {
  id          Int     @id @default(autoincrement())
  firstName   String
  lastName    String
  middleName  String?
  country     String
  city        String
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id])
}

model UserDetail {
  id                  Int     @id @default(autoincrement())
  title               String
  quote               String
  heroImage           String?
  aboutImage          String?
  yearsOfExperience   Int
  aboutMe             String
  cv                  String?
  rate                Float
  userId              Int     @unique
  user                User    @relation(fields: [userId], references: [id])
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String
  image       String?
  description String
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
}

model SkillCategory {
  id      Int      @id @default(autoincrement())
  name    String
  userId  Int
  user    User      @relation(fields: [userId], references: [id])
  skills  Skill[]
}

model Skill {
  id                Int              @id @default(autoincrement())
  name              String
  description       String
  image             String?
  skillCategoryId   Int
  userId            Int
  skillCategory     SkillCategory     @relation(fields: [skillCategoryId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
}

model ProjectCategory {
  id      Int      @id @default(autoincrement())
  name    String
  userId  Int
  user    User      @relation(fields: [userId], references: [id])
  projects Project[]
}

model Project {
  id                  Int                  @id @default(autoincrement())
  name                String
  description         String
  demoLink            String?
  tecnology            String?
  userId              Int
  projectCategoryId   Int
  projectCategory     ProjectCategory      @relation(fields: [projectCategoryId], references: [id])
  user                User                 @relation(fields: [userId], references: [id])
  projectImage     ProjectImage[]      
}

model ProjectImage {
  id          Int     @id @default(autoincrement())
  projectId Int
  image       String
  project Project    @relation(fields: [projectId], references: [id])
  
}

model Blog {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  blogImages   BlogImage[]  
}



model BlogImage {
  id          Int     @id @default(autoincrement())
  imageUrl    String
  blogId      Int
  blog        Blog    @relation(fields: [blogId], references: [id])
}

model SocialMediaLink {
  id      Int     @id @default(autoincrement())
  name    String
  link    String
  userId  Int
  user    User    @relation(fields: [userId], references: [id])
}

model Testimonial {
  id                  Int      @id @default(autoincrement())
  reviewerFullName    String
  reviewerTitle       String
  reviewerImage       String?
  feedback            String
  dateOfReview        DateTime @default(now())
  userId              Int
  user                User     @relation(fields: [userId], references: [id])
}

